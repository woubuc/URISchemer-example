<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialise URISchemer DLL
uri_schemer_init();


// Attempt to register URI scheme
result = uri_schemer_register_scheme("schemetest");

// Result is one of these:
// -1: Scheme already exists
// 0: Error occured or no admin access
// 1: Success

// If it didn't work
if(result == 0){

    // Check if we already asked for admin permissions
    ini_open("data.ini");
    adminRights = ini_read_real("URISchemer", "adminRightsRequested", 0);

    // If we haven't asked for admin permissions yet    
    if(adminRights == 0){
        
        // Set the INI to say we have asked for em now
        ini_write_real("URISchemer", "adminRightsRequested", 1);
        ini_close();
        
        // Tell the player that we're going to ask for permissions
        show_message("The game will ask for admin permission in order to install a URI scheme.");
        
        // Ask for admin rights
        // This will open a new instance of the game
        uri_schemer_request_admin_rights();
        
        // End this (now obsolete) instance of the game
        game_end();
        
    }else{
    
        // We've already asked for permission so don't do anything else here
        ini_close();
    }
}

// List all the CLI parameters
parameters = "CLI Parameters:#";
var parameterCount = parameter_count();
if(parameterCount &gt; 0){
    var i;
    for(i = 0; i &lt; parameterCount; i += 1){
       parameters += parameter_string(i + 1) + "#";
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Display the CLI parameters
draw_set_font(fnt_text);
draw_set_color(c_black);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(10, 10, parameters);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
